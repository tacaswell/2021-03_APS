#+TITLE:     Matplotlib and Scientific Visualization
#+AUTHOR:    Thomas A Caswell
#+EMAIL:     tcaswell@gmail.com, tcaswell@bnl.gov
#+DATE:      APS March Meeting 2021 | Session L61 | 2021-03-17
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+STARTUP: beamer

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [aspectratio=169]
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)
#+LATEX_HEADER: \usepackage{xcolor}
#+latex_header: \setbeamertemplate{navigation symbols}{}
#+LATEX_HEADER: \definecolor{hilightcolor}{RGB}{160,219,175}
#+latex_header: \setminted{linenos=true,highlightcolor=hilightcolor}
# #+LATEX_HEADER: \setbeameroption{show notes on second screen}
#+LATEX_HEADER: \institute[BNL]{Brookhaven National Laboratory | Matplotlib}


* Introduction
** Who am I?
    :PROPERTIES:
    :BEAMER_opt: t
    :END:

 - Trained as a physicist
   - Jamming + dynamics of Leidenfrost drops with Nagel and Gardel at UChicago
 - <2-> Currently in Data Science and System Integration program at NSLS-II
 - <2-> Current Project Lead of Matplotlib

\begin{center}
\includegraphics<1>[width=.75\linewidth]{raw_img.pdf}
\includegraphics<2>[width=.5\linewidth]{logo2_compressed.pdf}
\includegraphics<2>[width=.5\linewidth]{bluesky-logo-dark.pdf}
\end{center}

** Acknowledgments

*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .7
     :END:


- John Hunter (1968-2012)
- Michael Droettboom
- The whole Matplotlib development team!
  - Over 1,250+ people have contributed code
  - Many more in bug reports, feature requests, packaging, and user support
- Dora Caswell

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .3
     :END:
\begin{center}
\includegraphics[width=\linewidth]{contrib_wc.png}
\end{center}


*** @@latex:@@                     :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
\vfill

\setbeamerfont{smol}{size=\tiny}
\usebeamerfont{smol}

This project has been made possible in part by grant number 2019-207333 from
the Chan Zuckerberg Initiative DAF, an advised fund of Silicon Valley Community
Foundation.

** Matplotlib

*...is a comprehensive library for creating static, animated, and interactive visualizations in Python.*

- Widely used through out science
  - LIGO, EHT, LSST, NSLS-II, APS, ALS, SPT, STSci, ATLAS, Mars rovers, ...
  - Single PI labs in physics, chemistry, oceanography, meteorology, biology, ...


\begin{center}
\includegraphics[width=.45\linewidth]{ligo}
\includegraphics[width=.45\linewidth]{EHT}
\end{center}


\setbeamerfont{smol}{size=\tiny}
\usebeamerfont{smol}
https://www.facebook.com/photo.php?fbid=10213321822457967

https://mybinder.org/v2/gh/losc-tutorial/quickview/master

https://github.com/losc-tutorial/quickview


* Why make plots?
** What is visualization for?

1. Exploratory data analysis
   - Just get the data on the screen in a way /you/ can understand as fast as
     you can
2. Paper figures
   - Need to be /just right/
3. Part of a standard (interactive) workflow
   - Repeatedly visualize and explore similar data


\begin{center}
\includegraphics[width=.32\linewidth]{figs/step_1.1.1.pdf}
\includegraphics[width=.32\linewidth]{figs/step_4.2.pdf}
\includegraphics[width=.32\linewidth]{xrf_snap.pdf}
\end{center}


* Demos!
** Case Study: Paper Figure
- You have 25 cantilevers, varied something (called `control') in fabrication
- Displace away from equilibrium position and released to watch vibrations ring down
- Goals:
  - go from exploratory visualization to paper ready figures
  - write reusable helper functions


\begin{center}
\includegraphics[width=.75\linewidth]{figs/step_4.3.pdf}
\end{center}

** Step 0.0 ("just plot it")
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

#+begin_src python
from gen_data import get_data
import matplotlib.pyplot as plt

# d is an xarray.DataArray
d = get_data()
plt.plot(d)
#+end_src

- <2-> #accidental art

**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_0.0.pdf}
\end{center}


** Step 0.1 ("just plot it...the right direction")
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={6}
#+begin_src python
from gen_data import get_data
import matplotlib.pyplot as plt

# d is an xarray.DataArray
d = get_data()
plt.plot(d.T)
#+end_src



**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_0.1.pdf}
\end{center}


** Step 1.0 (plot just one)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={6-7}
#+begin_src python
from gen_data import get_data
import matplotlib.pyplot as plt

# d is an xarray.DataArray
d = get_data()
# pick out an abitrary row
m = d[6]
plt.plot(m)
#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_1.0.pdf}
\end{center}


** Step 1.1 (use meaningful x-axis, move to explicit API)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={9-10}
#+begin_src python
from gen_data import get_data
import matplotlib.pyplot as plt

# d is an xarray.DataArray
d = get_data()
# pick out an abitrary row
m = d[6]

fig, ax = plt.subplots()
ax.plot(m.time, m)
#+end_src

- Use the explicit API to determine which =Axes= plots go on rather than the
  implicit =pyplot= API.
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_1.1.pdf}
\end{center}
** Step 1.1.1 (use =xarray='s plotting for a quick view)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={10}
#+begin_src python
from gen_data import get_data
import matplotlib.pyplot as plt

# d is an xarray.DataArray
d = get_data()
# pick out an abitrary row
m = d[6]

fig, ax = plt.subplots()
m.plot(ax=ax)

#+end_src

- The =xarray.DataArray= knows enough about itself to plot against time, label
  the x-axis, and set the title.

**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_1.1.1.pdf}
\end{center}


** Step 1.2 (add legend and axis labels)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={9, 11-14}
#+begin_src python
  d = get_data()
  m = d[6]
  ctrl = float(m.control)
  fig, ax = plt.subplots()

  ax.plot(
      m.time,
      m,
      label=f"C: {ctrl:.1f}"
  )

  ax.legend()
  ax.set_xlabel("time (ms)")
  ax.set_ylabel("displacement (mm)")
#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_1.2.pdf}
\end{center}


** Step 1.3 (make a function)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={1, 9-11}
#+begin_src python
  def plot_one(ax, m):
      ...
      ln, = ax.plot(
          m.time, m, label=label
      )
      ...

  fig, ax = plt.subplots()
  plot_one(ax, d[0])
  plot_one(ax, d[5])
  plot_one(ax, d[-1])
  ...

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_1.3.pdf}
\end{center}

** Step 1.4 (add vertical offset to your function)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={1,5,10-12}
#+begin_src python
  def plot_one(ax, m, offset=0):
      ...
      ln, = ax.plot(
          m.time,
          m + offset,
          label=label
      )
      ...
  ...
  plot_one(ax, d[0], offset=0)
  plot_one(ax, d[5], offset=4)
  plot_one(ax, d[-1], offset=8)
  ...

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_1.4.pdf}
\end{center}

** Step 2.0 (fit the data)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+begin_src python
from gen_data import fit
...
fit_vals = fit(m)
ax.plot(
    m.time,
    fit_vals.sample(m.time),
    label=fit_vals._repr_latex_(),
    color='k'
)
plt.gca().set_title(
    r"$A e^{-\zeta\omega_0t} \sin..."
    usetex=True
)
...
#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_2.0.pdf}
\end{center}
** Step 2.1 (plot fit on data)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={1,3,5,9}
#+begin_src python
  def plot_one(ax, m, fv, offset=0):
      fit, = ax.plot(
          t, fv.sample(t) + offset
      )
      ann = ax.annotate(...)
      ...
  ...
  plot_one(
      ax, d[10], fit(d[10]), offset=4
  )
  ax.legend(n
      ncol=3, loc="upper center"
  )
  ...
#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_2.1.pdf}
\end{center}
** Step 2.2 (eliminate need for legend box)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={3}
#+begin_src python
  def plot_one(ax, m, fv, offset=0):
      ...
      ann = ax.annotate(...)
      ...

  ...
  plot_one(
      ax, d[10], fit(d[10]), offset=4
  )
  ...

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_2.2.pdf}
\end{center}

** Step 2.3 (wrap plotting multiple curves with offsets and fits in a function)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={1,12}
#+begin_src python
  def plot_several(ax, d, fits):
      for j, (m, fv) in enumerate(
              zip(d, fits)
      ):
          plot_one(ax, m, fv, 4*j)
      ax.set_xlabel("time (ms)")
      ax.set_ylabel("displacement (mm)")

  fig, ax = plt.subplots()
  indx = [0, 5, 24]
  fits = [fit(d[i]) for i in indx]
  plot_several(ax, d[indx], fits)

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_2.3.pdf}
\end{center}

** Step 3.0 (first look at $\omega_0$ and $\zeta$)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={1,9}
#+begin_src python
import pandas as pd

fits_df = pd.DataFrame(
    [fit(m) for m in d],
    index=d.coords["control"]
)

fig, ax = plt.subplots()
fits_df.plot(
    y=["zeta", "omega"], ax=ax
)

#+end_src

 - uses the column names for legend
 - uses index for x-axis/label

**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_3.0.pdf}
\end{center}

** Step 3.1 (helper functions for $\omega_0$ and $\zeta$ plots)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

#+begin_src python
  def plot_zeta(ax, fits_df):
      ax.set_xlabel(...)
      ax.set_ylabel(...)
      return ax.plot(...)

  def plot_omega(ax, fits_df):
      ax.set_xlabel(...)
      ax.set_ylabel(...)
      return ax.plot(...)

  fig, (ax1, ax2) = plt.subplots(2, 1)
  plot_zeta(ax1, fits_df)
  plot_omega(ax2, fits_df)

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_3.1.pdf}
\end{center}

** Step 4.0 (put it all together)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={6,11,12}
#+begin_src python
indx = [0, 10, 24]

fig, (ax1, ax2, ax3) = plt.subplots(
    1, 3, constrained_layout=True
)
plot_several(
    ax1,
    d[indx],
    [fits[i] for i in indx]
)
plot_zeta(ax2, fits_df)
plot_omega(ax3, fits_df)

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_4.0.pdf}
\end{center}
** Step 4.1 (improve the layout)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={2-3,8,12,13}
#+begin_src python
fig, ad = plt.subplot_mosaic(
    [["raw", "omega"],
     ["raw", "zeta" ]],
    constrained_layout=True
)
indx = [0, 10, 24]
plot_several(
    ad["raw"],
    d[indx],
    [fits[i] for i in indx]
)
plot_zeta(ad["zeta"], fits_df)
plot_omega(ad["omega"], fits_df)


#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_4.1.pdf}
\end{center}
** Step 4.2 (label the subplots)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={1,11}
#+begin_src python
def subplot_label(ax, text):
     return ax.annotate(text, ...)

spm = {
    "raw": "a",
    "omega": "b",
    "zeta": "c"
}

for k, v in spm.items():
    subplot_label(ad[k], f"({v})")
#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_4.2.pdf}
\end{center}
** Step 4.3 (set the size to journal specifications)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

#+attr_latex: :options highlightlines={9}
#+begin_src python
def paper_figure_2(
    fig, layout, d, fits, plot_every
):
   ...

dcw = 17.8 / 2.54
paper_figure_2(
    plt.figure(
        figsize=(dcw, dcw * 0.5)
    ),
    [["raw", "omega"], ["raw", "zeta"]],
    d,
    fits,
    plot_every=10,
)

#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=\linewidth]{figs/step_4.3.pdf}
\end{center}
** Step 4.4 (try a one column layout)
*** col place holder                                              :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_opt: t
    :END:

**** code side                                                        :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:
#+attr_latex: :options highlightlines={4,6}
#+begin_src python
scw = 8.6 / 2.54
paper_figure_2(
    plt.figure(
        figsize=(scw, scw * 2.5)
    ),
    [["raw"], ["omega"], ["zeta"]],
    d,
    fits,
    plot_every=10,
)
#+end_src
**** image side                                                       :BMCOL:
     :PROPERTIES:
     :BEAMER_col: .5
     :END:

\begin{center}
\includegraphics[width=.4\linewidth]{figs/step_4.4.pdf}
\end{center}

** Case Study Summary
- Went from initial exploratory look at data to a paper-ready figure
- Iterative built a mini-library for *this* experiment

\begin{center}
\includegraphics[width=.45\linewidth]{figs/step_0.1.pdf}
\includegraphics[width=.45\linewidth]{figs/step_4.2.pdf}
\end{center}

** Interactive Visualizations

- Matplotlib has framework-agnostic UI tools to get mouse and keyboard events
- several third-party-packages with more complex interactions
 - mplcursors https://mplcursors.readthedocs.io/en/stable/
 - MplDataCursor https://github.com/joferkington/mpldatacursor
 - mpl_interactions https://mpl-interactions.readthedocs.io/en/latest/

\vspace

#+BEGIN_CENTER
*LIVE DEMO TIME*
#+END_CENTER

** Hello world

- =fig.ginput= in a terminal
- handle mouse click events in a Jupyter notebook

** Interactive application (temperature)


\begin{center}
\includegraphics[width=.75\linewidth]{temperature_snap.pdf}
\end{center}


** Interactive applications (x-ray fluorescence map)

\begin{center}
\includegraphics[width=.75\linewidth]{xrf_snap.pdf}
\end{center}

* Conclusions
** Software Development Philosophy


\begin{center}
\includegraphics<1>[width=.95\linewidth]{volcano1.pdf}
\includegraphics<2>[width=.95\linewidth]{volcano2.pdf}
\end{center}

** Future Work

- On going incremental improvements, bug fixes, and maintenance
- Improvements to Figure and Axes layout tooling (Jody Klymak)
- Re-designing Matplotlib's internal data model (Hannah Aizenman)

** Resources

This material: https://github.com/tacaswell/2021-03_APS

- docs: https://matplotlib.org/stable
- cheatsheets: https://github.com/matplotlib/cheatsheets
- chat: https://gitter.im/matplotlib
- forum: https://discourse.matplotlib.org
- tutorials:
 - https://github.com/matplotlib/interactive_tutorial,
 - https://github.com/matplotlib/AnatomyOfMatplotlib
 - https://github.com/matplotlib/GettingStarted


- _Interactive Applications Using Matplotlib_, Benjamin V. Root (2015)
- domain-specific libraries


- Building a maintainable plotting library (PyData NYC 2019) https://youtu.be/NV4Y75ZUDJA
- Seperation Of Scales (PyData Gobal 2020)  https://youtu.be/P85UIuMovnI
